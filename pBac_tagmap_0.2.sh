#!/bin/bash

# tagmap shell script 
# author: 	David L. Stern
# 			Janelia Research Campus
#			HHMI
#			Ashburn, VA
#			30 December 2017
#			v. 0.2
#
# Filters and maps reads, finds overlapping forward and reverse reads, plots overlap regions at low and high resolution
# Operates on a folder full of *fastq.gz files generated by the TagMap molecular protocol
# Currently uses bwa-mem for short-read mapping. This works great for most transposons, which duplicate the target site.
#
# Variables:
#
# To detect the orientation of the transposable element or duplicated sequence, provide the first N bp from the 5' of the sequence
#
# dependencies available to system:
#	prinseq-lite-0.20.4 (http://prinseq.sourceforge.net)
#		Make prinseq-lite executable
#			Navigate to folder and type
#			chmod 755 prinseq-lite.pl
#	bwa 0.7.12-r1039 (http://bio-bwa.sourceforge.net/bwa.shtml)
#	samtools 1.3 (http://samtools.sourceforge.net)
#	gnuplot 5.0 patchlevel 1 (http://www.gnuplot.info)

# run as ./tagmap <mapping_genome>

mapping_genome=$1

##########################################################
#
# USER SUPPLIED 5' and 3' sequences
#
#full sequences
fiveprimeseq=TTAACCCTAGAAAGATAGTCTGCGTAAAATTGACGCATG #TTAA is duplicated pBac recognition sequence
threeprimeseq=TTAACCCTAGAAAGATAATCATATTGTGACGTACGTTAA
#short sequences
#fiveprimeseq=TTAACCCTAGAAAGATAG
#threeprimeseq=TTAACCCTAGAAAGATAA


#
#
#
##########################################################


rc_fiveprimeseq=`echo $fiveprimeseq | tr ACGT TGCA | rev`
rc_threeprimeseq=`echo $threeprimeseq | tr ACGT TGCA | rev`


#prepare bwa index of relevant genome

if [ -e ${mapping_genome}.sa ]; then
	echo bwa index already built.
else
	echo building bwa index.
	bwa index $mapping_genome 
fi

#unzip all fastq.gz files

gunzip *fastq.gz

for filename in *.fastq; do 

	#remove PCR duplicates
	#make prinseq-lite executable and put in executable 
	#prinseq automatically appends a fast suffix to output
	prinseq-lite.pl -derep 12 -fastq ${filename} -out_good ${filename}.good -out_bad null
	
	#map reads to genome, convert to bam, and sort
	#Program: bwa (alignment via Burrows-Wheeler transformation)
	#Version: 0.7.12-r1039
	bwa mem $mapping_genome ${filename}.good.fastq | samtools view -b /dev/stdin | samtools sort /dev/stdin > ${filename}.good.fastq.sorted.bam
	
	#make bai file

	samtools index ${filename}.good.fastq.sorted.bam

	# find locations with pBac sequences
	samtools view -F 4 ${filename}.good.fastq.sorted.bam | egrep -i ${fiveprimeseq}\|${rc_threeprimeseq}\|${threeprimeseq}\|${rc_fiveprimeseq} > ${filename}.TESites.sam
	
	samtools view -F 4 ${filename}.good.fastq.sorted.bam | egrep -i ${fiveprimeseq}\|${rc_threeprimeseq} > ${filename}.fwdSites.sam
	samtools view -F 4 ${filename}.good.fastq.sorted.bam | egrep -i ${threeprimeseq}\|${rc_fiveprimeseq}  > ${filename}.revSites.sam

	#grab unique positions (chrom & bp)
	cut -f 3-4 ${filename}.TESites.sam | uniq > ${filename}.HitSites.txt

	#reduce to unique sites within 300bp using Python -- produces *HitSites.txt.candidates_sites
	python thin.py ${filename}.HitSites.txt

	#grab positions (result: chrom, bp, count, orientation)
	cut -f 2-4 ${filename}.fwdSites.sam | uniq -c|tr ' ' '\t'|awk '{ print $3 "\t" $4 "\t" $1 "\t" $2} ' > ${filename}.fwdHitSites.txt
	cut -f 2-4 ${filename}.revSites.sam | uniq -c|tr ' ' '\t'|awk '{ print $3 "\t" $4 "\t" $1 "\t" $2} ' > ${filename}.revHitSites.txt
		

#	python thin.py ${filename}.fwdHitSites.txt
#	python thin.py ${filename}.revHitSites.txt
	
	#Produce two files, with depth for reads in opposite orientation
	samtools view -F 0x10 ${filename}.good.fastq.sorted.bam -b| samtools depth /dev/stdin > ${filename}.good.fastq.sorted.fwd.depth
	samtools view -f 0x10 ${filename}.good.fastq.sorted.bam -b| samtools depth /dev/stdin  > ${filename}.good.fastq.sorted.rev.depth
	
	#print out 2kb flanking around each candidate site using both fwd and rev files

	#for each candidate site, grab chromosome and position
	old_chrom='null'
	while read chrom bp #grab chromosome and bp position
	do
		if [ $chrom = $old_chrom ]; then 
			:
		else
			#grab position and depth from selected chromosome
			grep ^$chrom ${filename}.good.fastq.sorted.fwd.depth | cut -f 2-3 > ${filename}.plot_forward
			grep ^$chrom ${filename}.good.fastq.sorted.rev.depth | cut -f 2-3  > ${filename}.plot_reverse
			grep ^$chrom ${filename}.fwdHitSites.txt | cut -f 2-3  > ${filename}.fwdHits.txt
			grep ^$chrom ${filename}.revHitSites.txt | cut -f 2-3  > ${filename}.revHits.txt
			old_chrom=$chrom
		fi
		
		#get actual location of TE insertion => bp
#		search *.TESites.sam with chrom and bp 
		hit_seq=`awk -v a="$chrom" -v b="$bp" '$3==a && $4==b"" {print $10; exit}' ${filename}.TESites.sam`
		#grep sequence in sam file with TE sequence and return offset and orientation
		read offset orientation <<< `python get_index.py $hit_seq $fiveprimeseq $threeprimeseq $rc_fiveprimeseq $rc_threeprimeseq`
		
		insert_bp=`expr "$bp" + "$offset"`
		start=`expr "$insert_bp" - 35`
		samtools tview -d T -p $chrom:$start ${filename}.good.fastq.sorted.bam > ${filename}.$chrom.$insert_bp.$orientation.tview.txt

		#grab 1kb up and downstream of site from for.depth and rev.depth files
		start=`expr "$insert_bp" - 1000`
		stop=`expr "$insert_bp" + 1000`
		
		gnuplot -p -e "set terminal postscript color ;\
		set xrange [$start:$stop];\
		unset key;\
		plot '${filename}.plot_forward' with dots lw 5 linecolor rgb 'red','${filename}.plot_reverse' with dots lw 5 linecolor rgb 'blue',\
		'${filename}.fwdHits.txt' with points pointtype 1 linecolor rgb '#F08080',\
		'${filename}.revHits.txt' with points pointtype 1 linecolor rgb '#00CED1'"> ${filename}.$chrom.$insert_bp.$orientation.gnuplot.ps
		
	done < ${filename}.HitSites.txt.candidate_sites
	
# Comment out following line for troubleshooting
	rm ${filename}.good* ${filename}.*HitSites.* ${filename}.*.sam ${filename}.plot* ${filename}.*Hits.txt

done

